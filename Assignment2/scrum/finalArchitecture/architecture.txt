# Architecture

# MVC
# ModelClasses
   PaintModel
# ViewClasses
   paint-view.fxml
# ControllerClasses
   FXMLController

# Composite
# Component Classes
	Action
# Composite Classes
	Shape, Lines, Rectangle
# Leaf
	Square, Circle, Oval, Textbox, Selector, Squiggle, Polyline

# Factory
# Client Class
	PaintModel
# Factory Classes
	DrawableFactory
# Product Class
	Drawable
# Concrete Product Classes
	Polyline, Squiggle, Rectangle, Square, Circle, Oval, Triangle, Selector, Textbox


# Design Patterns Used (collections of classes into DP)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Name: DrawableFactory
Pattern Name: Factory
Reference: https://www.oodesign.com/factory-pattern

Purpose:
   This pattern encapsulates the Drawable object creation logic and improves testing and reusability.
   In this application, users are constantly creating objects, thus it is mandatory to have a delicate way of drawable object creation.

UML:
   FactoryDesignPattern.pdf

Classes:
   PaintModel: Client
   DrawableFactory: Factory
   Drawable: Product
   Polyline: ConcreteProduct
   Squiggle: ConcreteProduct
   Square: ConcreteProduct
   Rectangle: ConcreteProduct
   Triangle: ConcreteProduct
   Circle: ConcreteProduct
   Selector: ConcreteProduct
   Textbox: ConcreteProduct
   Oval: ConcreteProduct

Usage:
   Since users will be constantly drawing objects, developers will need a way to create these Drawable objects in memory.
   Thus, if developers use DrawableFactory, it will reduce a lot of repetition in the code and help developers understand the general structure.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Name: PaintObserver
Pattern Name: Observer
Reference: https://www.digitalocean.com/community/tutorials/observer-design-pattern-in-java

Purpose:
    For the Single Responsibility Principle, where every class must have a single, focused responsibility,
    a single reason to change, we can understand that the Observable, PaintModel, has the responsibility of storing and
    changing the state of the application and logic related to the painting features, such as the drawing of rectangles, text, etc.
    On the other hand, the Observer, FXMLController, is designed to handle updates in the model, and inputs from the application interface.
    Its sole purpose is to Observe changes from the Observable, and reflect them to the application interface.

    For the Open-closed Principle, where components must be open for extension, we can understand that the Observer,
    FXMLController is open for extension, the extension of new handlers, and buttons. Each of these handlers communicates to
    the model a change. The Observable, PaintModel, can be extended to handle these changes, updating its observers once changed.

UML:
   ObserverDesignPattern.pdf

Classes:
   PaintModel: Observable
   FXMLController: Observer

Usage:
    A developer would interact with this code by implementing new features, such as new shapes, etc or enhancing the
    handling of drawings. They would achieve this purpose, by ensuring that whenever the model is changed, the observers are notified,
    that is the FXMLController is notified.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Name: CompositeAction
Pattern Name: Composite
Reference: https://www.oodesign.com/composite-pattern

Purpose:
   The Composite Design Pattern is a structural design pattern used to treat individual objects and compositions of objects uniformly.
   In our application, Redo, Undo, Eraser, Drawables and all classes that extend Drawable are all composite of class Action.
   This way we can organize all these objects and record them in one history, allowing a formal and standard way to work with each of the objects.

UML:
   CompositeDesignPattern.pdf

Classes:
   PaintModel: Client
   Action: Component
   Redo: Leaf
   Undo: Leaf
   Eraser: Leaf
   Drawable: Composite
   Line: Composite
   Squiggle: Leaf
   Polyline: Leaf
   Oval: Leaf
   Circle: Leaf
   Triangle: Leaf
   Rectangle: Composite
   Square: Leaf
   Selector: Composite
   Textbox: Leaf

Usage:
   When developers try to work with this application, they would want to have a straight-forward and well-organized way
   of implementing actions that users does. Thus, by implementing this design pattern, developers will be able to implement new classes by following its parent class.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# High Level Architecture Discussion

   Once upon a time, three students came together and acknowledged that Microsoft Paint, could be easily implemented with special features and a modern, but cute look. And so with the usage of Java, CSS, and FXML, they developed an application. But before they developed an application, they had to consider, how the information would be stored, viewed, and calculated. And so they came up with the idea of using the design pattern Observer.

   To understand how to modify our Observer pattern, you must look at FXMLController and PaintModel. One must understand that every element in the view, paint-view.fxml, is handled by a specific handler or general handler in the FXMLController. To modify the data being stored or modify the way the data from the view is being stored, you must understand that PaintModel has several methods, but most importantly one main method that handles, the drawing inputs. You can extend this pattern in many ways, specifically creating new features, that includes the creation of buttons and drawing modes. But how can we extend these new features? Well for buttons the following is how you would implement it:

	image icon: Create a jpg image with dimensions 30x30 that follow the colour scheme. Place it the resources folder images/ButtonIconX.jpg.

	FXML:
		Add a button to any grid or HBox or VBox, where necessary. If the grid is full increase the size of the grid accordingly. Add the necessary button class styles, according to relative buttons in the section. Add the necessary eventhandler, that will be called in the controller.

	FXMLController:
		To handle the button input, create a handler with the same name as the button's eventhandler referencing FXML. In this controller, you may call or add methods in the model accordingly.

	But we want these buttons to have functionality, such as adding a new drawing mode. And so we began added several files, such as Circle, Oval, etc. But as we added new drawing modes, the methods to handle the different shapes became complicated and very convoluted. And so several design patterns were needed to help future developers, such as you, to implement new drawing modes. These design patterns being, Factory and Composite.

	To understand how to modify our Factory pattern, you must understand that our DrawableFactory handles the creation of shapes. And so you can simply create new ConcreteProduct classes and update the DrawableFactory. But what if we want to do something with these shapes? Maybe undo or redo? Creating an arraylist to hold all this information would be quite inefficient, and hard to expand and handle. So the use of the design pattern Composite helps combat such intrique features.

	Taking a look at our Composite design pattern, you must understand the interactivity between the client, PaintModel, our component Action, and all of the composite and leafs. All of the leafs and composites are organized and the histories of each object are recorded, allowing a formal and standard way to work with each of the objects. And so now that we understand how to create new shapes, and interact with these shapes, creating a new drawing mode shoudln't be too hard:

	image icon:
	    Create a jpg image with dimensions 30x30 that follow the colour scheme.
	    Then place it the resources folder images/ButtonIconX.jpg.

    Class for X:
        Create a class for "X".
        X will be a subclass of Drawable.
        Since Shape and Line are abstract subclasses of Drawable, X can also inherit from Shape/Line.

    getArgs()
       In PaintModel.java, add the case X to indicate what arguments are needed to create an X object.

    Drawable Factory:
        In DrawableFactory.java, add the case X to use the arguments from getArgs() to create an X object.

    Mouse Handler Strategy:
        Inside class X, implement functions:
            public void pressed(MouseEvent mouseEvent)
            public void moved(MouseEvent mouseEvent)
            public void dragged(MouseEvent mouseEvent)
            public void released(MouseEvent mouseEvent)

    PaintShape:
	    In FXMLController.java, go to the 'update(Observable o, Object arg)' function.
	    Implement how the shape should be drawn by JavaFX.
